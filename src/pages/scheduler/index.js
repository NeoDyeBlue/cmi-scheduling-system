import Head from 'next/head';
import { MainLayout } from '@/components/Layouts';
import { MdAdd, MdClose } from 'react-icons/md';
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
import { Button } from '@/components/Buttons';
import { Scheduler } from '@/components/Inputs';
import DraggableSchedule from '@/components/Misc/DraggableSchedule';
import { schedulerData } from '@/lib/test_data/scheduler';
import { useEffect, useState } from 'react';
import useSchedulerStore from '@/stores/useSchedulerStore';
import { RoomSelector, Modal } from '@/components/Modals';

export default function Schedules() {
  const {
    setCourseSubjects,
    courseSubjects,
    selectedRooms,
    setSubjectsData,
    subjectsData,
    setCourse,
  } = useSchedulerStore();
  useEffect(() => {
    setCourseSubjects(schedulerData.subjects);
    setCourse(schedulerData.course);
    const courseSubjectsData = [];
    schedulerData.subjects.forEach((subject) => {
      subject.teachers.forEach((teacher) => {
        const dataId = `${subject.code}~${teacher.id}`;
        const { teachers, ...newData } = subject;
        courseSubjectsData.push({
          id: dataId,
          data: { ...newData, teacher },
        });
      });
    });
    setSubjectsData(courseSubjectsData);
  }, [setCourseSubjects, setSubjectsData, setCourse]);

  useEffect(() => {
    if (subjectsData.length) {
      const roomSubjectsData = [];
      selectedRooms.forEach((room) => {
        room.schedules.forEach((schedule) => {
          const dataId = `${schedule.subject.code}~${schedule.teacher.id}`;
          if (
            !subjectsData.some((data) => data.id == dataId) &&
            !roomSubjectsData.some((data) => data.id == dataId)
          ) {
            roomSubjectsData.push({
              id: `${schedule.subject.code}~${schedule.teacher.id}`,
              data: {
                ...schedule.subject,
                teacher: schedule.teacher,
              },
            });
          }
        });
      });
      setSubjectsData([...subjectsData, ...roomSubjectsData]);
    }
  }, [selectedRooms]);

  const [isModalOpen, setIsModalOpen] = useState(false);

  const draggableSchedules = courseSubjects.map((subject, subjIndex) => {
    const { teachers, ...newData } = subject;
    return subject.teachers.map((teacher, teacherIndex) => (
      <DraggableSchedule
        key={`${teacher.id}-${subjIndex}-${teacherIndex}`}
        data={{ ...newData, teacher }}
      />
    ));
  });

  const selectedRoomTabs = selectedRooms.map((room, index) => (
    <Tab
      key={`${room.code}-${index}`}
      className="tab group relative"
      selectedClassName="tab-active"
    >
      <button
        onClick={(e) => {
          e.stopPropagation();
        }}
        className="absolute top-0 right-0 m-1 hidden h-[20px] w-[20px] items-center 
              justify-center rounded-full border border-gray-200 bg-white text-center 
              text-ship-gray-900 group-hover:flex"
      >
        <MdClose size={16} />
      </button>
      {room.code}
    </Tab>
  ));

  const selectedRoomTabPanels = selectedRooms.map((room) => (
    <TabPanel key={`${room.code}`}>
      <Scheduler
        startTime="6:00 AM"
        endTime="6:00 PM"
        interval={30}
        className="tab"
        roomCode={room.code}
        roomSchedules={room.schedules}
      />
    </TabPanel>
  ));

  return (
    <>
      <Head>
        <title>Schedules | CMI - Scheduler</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        label="Add a Room"
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      >
        <RoomSelector onSelectClose={() => setIsModalOpen(false)} />
      </Modal>
      <div className="relative flex w-full flex-col gap-4 p-6">
        <div>
          <p>Creating schedules for:</p>
          <h1 className="font-display font-semibold">
            Bachelor of Science in Computer Science 1A
          </h1>
        </div>
        <div className="relative flex w-full gap-4">
          <Tabs
            className="flex w-full gap-4"
            onSelect={(index) => console.log(index)}
          >
            <div className="flex w-fit flex-col gap-4">
              <Button small secondary onClick={() => setIsModalOpen(true)}>
                <MdAdd size={20} /> Room
              </Button>
              <TabList className="scrollbar-hide flex w-full flex-col gap-2 overflow-y-auto">
                {selectedRoomTabs}
              </TabList>
            </div>
            <div className="w-full">
              {/* <TabPanel>
                <Scheduler
                  startTime="6:00 AM"
                  endTime="6:00 PM"
                  interval={30}
                />
              </TabPanel>
              <TabPanel>
                <Scheduler
                  startTime="6:00 AM"
                  endTime="6:00 PM"
                  interval={30}
                />
              </TabPanel> */}
              {!selectedRooms.length ? (
                <div
                  className="flex h-full items-center justify-center rounded-md border border-dashed 
                border-gray-400 text-center text-gray-400"
                >
                  <p className="text-xl">Select a room for scheduling</p>
                </div>
              ) : (
                selectedRoomTabPanels
              )}
            </div>
          </Tabs>
          <div className="flex flex-col gap-3 rounded-md border border-dashed border-gray-400 p-3">
            <p className="font-display text-lg font-semibold">Subjects</p>
            <ul className="flex h-fit min-w-[200px] flex-col gap-3">
              {draggableSchedules.flat()}
            </ul>
          </div>
        </div>
      </div>
    </>
  );
}

Schedules.getLayout = function getLayout(page) {
  return <MainLayout name="Scheduler">{page}</MainLayout>;
};
